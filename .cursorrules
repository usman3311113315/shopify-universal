# Cursor Rules for Shopify Development

## Project Context
This is a Shopify theme development project using Liquid templating language, JavaScript, and CSS. The project follows Shopify's coding standards and best practices.

## Coding Standards
- Use Liquid templating language for dynamic content
- Follow Shopify's section and snippet structure
- Implement responsive design principles
- Use semantic HTML and accessible markup
- Follow BEM CSS methodology for class naming
- Use Shopify's recommended file structure

## File Structure
- `sections/` - Theme sections (liquid files)
- `snippets/` - Reusable code snippets (liquid files)
- `assets/` - CSS, JavaScript, and other static files
- `templates/` - Page templates (liquid files)
- `layout/` - Theme layout files (liquid files)
- `config/` - Theme configuration files

## Liquid Best Practices
- Use proper Liquid syntax: `{{ variable }}`, `{% tag %}`
- Always escape output: `{{ variable | escape }}`
- Use Shopify filters appropriately: `| money`, `| img_url`, etc.
- Handle empty states: `{% if variable != blank %}`
- Use proper conditional statements

## JavaScript Guidelines
- Use vanilla JavaScript or minimal frameworks
- Follow Shopify's JavaScript API patterns
- Implement proper error handling
- Use async/await for API calls
- Follow ES6+ standards

## CSS Guidelines
- Use BEM methodology for class naming
- Implement responsive design with mobile-first approach
- Use CSS custom properties for theming
- Optimize for performance
- Follow accessibility guidelines

## Shopify-Specific Patterns
- Use `section.settings` for customizable content
- Implement proper schema for section settings
- Use `{{ shop.url }}` for absolute URLs
- Handle product variants correctly
- Implement proper cart functionality

## Performance Considerations
- Optimize images with appropriate sizes
- Minimize JavaScript bundle size
- Use lazy loading where appropriate
- Implement proper caching strategies
- Optimize CSS delivery

## Security Guidelines
- Always escape user input
- Use Shopify's built-in security features
- Validate data before processing
- Follow OWASP security guidelines

## Accessibility
- Use semantic HTML elements
- Provide proper alt text for images
- Ensure keyboard navigation
- Maintain proper color contrast
- Use ARIA labels where appropriate

## Testing Guidelines
- Test across different browsers
- Verify mobile responsiveness
- Check for console errors
- Validate HTML structure
- Test user interactions thoroughly

## Common Patterns
- Product cards with quick add functionality
- Cart drawer with upsell features
- Collection filtering and sorting
- Newsletter signup forms
- Product recommendation sections
- Size guides and product information
- Social media integration
- Customer reviews and ratings

## Error Handling
- Implement proper error boundaries
- Use try-catch blocks for API calls
- Provide user-friendly error messages
- Log errors appropriately
- Handle network failures gracefully

## Code Organization
- Keep functions small and focused
- Use meaningful variable and function names
- Add comments for complex logic
- Group related functionality together
- Follow consistent formatting

## Shopify API Usage
- Use `/cart/add.js` for cart operations
- Implement proper product variant handling
- Use collection and product objects correctly
- Handle metafields appropriately
- Follow Shopify's GraphQL patterns when needed

## Theme Customization
- Use section settings for customization
- Implement proper color and typography options
- Provide layout flexibility
- Allow content management through admin
- Support multiple languages if needed

## Development Workflow
- Use Shopify CLI for development
- Test changes in development environment
- Use version control for code management
- Follow Git best practices
- Document custom functionality

## Common Issues to Avoid
- Don't hardcode values that should be dynamic
- Avoid inline styles when possible
- Don't forget to handle empty states
- Avoid using deprecated Shopify features
- Don't ignore mobile performance
- Avoid over-complicating simple features

## Performance Optimization
- Use appropriate image sizes
- Minimize HTTP requests
- Optimize CSS and JavaScript
- Use CDN for static assets
- Implement proper caching
- Monitor Core Web Vitals

## SEO Considerations
- Use proper heading hierarchy
- Implement structured data
- Optimize page titles and meta descriptions
- Use canonical URLs
- Ensure proper internal linking

## User Experience
- Provide clear navigation
- Implement proper loading states
- Use consistent design patterns
- Ensure fast page loads
- Provide clear feedback for user actions